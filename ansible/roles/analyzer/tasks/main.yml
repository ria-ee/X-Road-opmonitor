---
- import_tasks: ubuntu.yml
  when: ansible_os_family == "Debian"

- name: Install the necessary packages
  pip:
    name: [
      'dill',
      'django',
      'pymongo',
      'numpy',
      'pandas',
      'scipy',
      'mod_wsgi'
    ]
    executable: pip3

- name: Ensure group "{{ module_user }}" exists
  group:
    name: "{{ module_user }}"
    state: present

- name: Create the system user {{ module_user }}
  user:
    name: "{{ module_user }}"
    group: "{{ module_user }}"
    home: "/opt/{{ module_user }}"
    create_home: yes
    move_home: yes
    system: yes
    shell: /bin/bash

- name: Append the opmon group to {{ module_user }} and www-data
  user:
    name: "{{ item }}"
    groups: "opmon"
    append: yes
  with_items:
    - "{{ module_user }}"
    - "www-data"

# -------- Analyzer module --------
- name: Copy the analyzer module to the install folder
  copy:
    src: "{{SOURCE}}/{{module_name}}/analyzer"
    dest: "{{APPDIR}}/{{INSTANCE}}/{{module_name}}"
    remote_src: yes
    mode: preserve

- name: Update the settings file
  template:
    src: "roles/{{ module_user }}/templates/settings.py.j2"
    dest: "{{APPDIR}}/{{INSTANCE}}/{{module_name}}/analyzer/instance_configurations/settings_{{INSTANCE}}.py"

- name: Create the symlink
  file:
    src: "{{APPDIR}}/{{INSTANCE}}/{{module_name}}/analyzer/instance_configurations/settings_{{INSTANCE}}.py"
    dest: "{{APPDIR}}/{{INSTANCE}}/{{module_name}}/analyzer/settings.py"
    group: opmon
    state: link
    follow: yes

- name: Fix the symlink permissions
  file:
    path: "{{APPDIR}}/{{INSTANCE}}/{{module_name}}/analyzer/settings.py"
    group: opmon
    mode: "0775"

- name: Adjust the {{ module_user }} module permissions
  file:
    path: "{{APPDIR}}/{{INSTANCE}}/{{module_name}}"
    recurse: yes
    owner: "{{ module_user }}"
    group: "{{ module_user }}"
    state: directory
    mode: "0500"

# -------- Analyzer UI --------
- name: Create the {{ module_user }} UI module folder
  file:
    path: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}"
    state: directory

- name: Copy the Analyzer UI to the web dir
  copy:
    src: "{{SOURCE}}/{{module_name}}/analyzer_ui"
    dest: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}"
    remote_src: yes
    mode: preserve

- name: Update the settings file for the UI module
  template:
    src: "roles/{{ module_user }}/templates/settings-ui.py.j2"
    dest: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/instance_configurations/settings_{{INSTANCE}}.py"

- name: Create the symlink for the UI module's settings file
  file:
    src: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/instance_configurations/settings_{{INSTANCE}}.py"
    dest: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/analyzer_ui/settings.py"
    state: link
    follow: yes

- name: Fix the symlink permissions
  file:
    path: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/analyzer_ui/settings.py"
    mode: "0775"

- name: Adjust the {{ module_user }} UI module permissions
  file:
    path: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}"
    recurse: yes
    owner: "www-data"
    group: "www-data"
    state: directory
    mode: "0750"

- name: Set up database directory to store Django's internal SQLite database for UI
  file:
    path: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/database"
    owner: "www-data"
    group: "www-data"
    state: directory

# -------- Django SQLite databases --------
- name: Create SQLite schemas
  command: "python3 {{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/manage.py makemigrations"
  become: yes
  become_user: "www-data"

- name: Create SQLite corresponding tables
  command: "python3 {{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/manage.py migrate"
  become: yes
  become_user: "www-data"

- name: Make the static directory writable for the user www-data
  file:
    path: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}/{{module_name}}/analyzer_ui/static"
    recurse: yes
    owner: "www-data"
    group: "www-data"
    state: directory

# -------- Apache configuration --------
- name: Collect static files for Apache
  shell: "python3 {{WEBDIR}}/{{INSTANCE}}/{{module_name}}/analyzer_ui/manage.py collectstatic <<<yes"
  args:
    executable: /bin/bash
  become: yes
  become_user: "www-data"

- name: Make the root:root static directory explicitly read-only for others (including www-data)
  file:
    path: "{{WEBDIR}}/{{INSTANCE}}/{{module_name}}/{{module_name}}/analyzer_ui/static"
    recurse: yes
    owner: "root"
    group: "root"
    state: directory
    mode: "0755"

- name: Install Apache's wsgi module
  shell: "mod_wsgi-express install-module | head --lines 1 > /etc/apache2/mods-available/wsgi.load"

- name: Create the Apache configuration file
  template:
    src: "roles/{{ module_user }}/templates/analyzer.conf.j2"
    dest: "/etc/apache2/sites-available/analyzer.conf"

- name: Disable the default site configuration
  command: "a2dissite 000-default.conf"

- name: Enable the site configuration
  command: "a2ensite analyzer.conf"

- name: Reload the apache service
  systemd:
    state: reloaded
    name: apache2

- name: Ensure the collector job runs every 3 hours."
  cron:
    name: "Collector"
    user: "{{ module_user }}"
    minute: "0"
    hour: "6"
    job: "export APPDIR=\"{{APPDIR}}\"; export INSTANCE=\"{{INSTANCE}}\"; cd ${APPDIR}/${INSTANCE}/{{module_name}}/analyzer; python3 train_or_update_historic_averages_models.py; python3 find_anomalies.py"